<meta name="viewport" content="initial-scale=1.0,maximum-scale=2.0,height=device-height,width=device-width,user-scalable = yes">
<script src="/javascripts/jquery.mobile-1.1.0.min.js" type="text/javascript" charset="UTF-8"></script>
<link rel="stylesheet" media="screen" href="/stylesheets/render-places.css">
<style>
	@media (max-width: 800px){
		#top {
			display:none;
			 }
		}
</style>
<script type="text/javascript">
	//UTILS 
	function pad(numNumber, numLength){
		var strString = '' + numNumber;
		while(strString.length<numLength){
			strString = '0' + strString;
		}	
		return strString;
	}
	
	// KNOCKOUT JS 
	var viewmodel;
	// Classe que representa uma mesa 
	function Table(id, label, x, y, _class) {
		var self = this;
		self.id = id;
		self._class = _class;
		self.label = ko.observable(label);
		self.x = ko.observable(x);
		self.y = ko.observable(y);
		self.places = ko.observableArray();
		self.addPlace = function (json){
			self.places.push(new Place(json.id, json.label, json.x, json.y, 
					json.occupied, json.numberOfOccupants, self, json.rotation));
		};
	}
	
	// Classe que representa um lugar 
	function Place(id, label, x, y, occupied, numberOfOccupants, table, rotation) {
		var self = this;
		self.id = id;
		self.label = ko.observable(label);
		self._x = ko.observable(x);
		self._y = ko.observable(y);
		self.table = ko.observable(table); 
		self.x = ko.computed({
			read: function(){
				return self._x() + (self.table().x() * viewmodel.gridSizePixels());
			},
			write: function(value){ self._x(value) }
		});
		self.y = ko.computed({
			read: function(){
				return self._y() + (self.table().y() * viewmodel.gridSizePixels());
			},
			write: function(value){ self._y(value) }
		});
		self.numberOfOccupants = numberOfOccupants <= 0 ? 1 : numberOfOccupants;
		self.selected = ko.observable(false);
		self.occupied = ko.observable(occupied);
		self.rotation = rotation;
		self.select = function () {
			if (!self.occupied()) {
				self.selected(!self.selected());
// 				console.log(viewmodel.numberOfOccupants());
// 				console.log(viewmodel.selectedNumberOfOccupants());
				var selected = viewmodel.selectedNumberOfOccupants();
				viewmodel.numberOfOccupants(selected > 0 ? selected : 1 );
			}
		};
		self.occupy = function (value) {
			self.occupied(value);
			if (value) 
				self.selected(false);
		};
	}
	
	// Viewmodel para o layout 
	function LayoutViewModel() {
	    var self = this;
	    self.name = ko.observable();
	    self.loading = ko.observable(false);
	    self.gridSizePixels = ko.observable(5);
	    self.tables = ko.observableArray();
	    self.hasTeacher = ko.observable(false);
	    self.toggleTeacher = function(){
	    	self.hasTeacher(!self.hasTeacher());
	    };
	    self.places = ko.computed(function(){
	    	var array = [];
	    	for (var table in self.tables()) {
	    		var places = self.tables()[table].places();
	    		array = array.concat(places);
	    	}
	    	return array;
	    });
	    self.numberOfOccupants = ko.observable(1);
	    self.addNumberOfOccupants = function(){
	    	self.numberOfOccupants(self.numberOfOccupants() + 1);
	    };
	    self.subtractNumberOfOccupants = function(){
	    	if (self.numberOfOccupants() > 1)
	    		self.numberOfOccupants(self.numberOfOccupants() - 1);
	    };
	    self.selectedNumberOfOccupants = ko.computed(function() {
	    	var count = 0;
			ko.utils.arrayMap(self.places(), function(item) {
            	count += item.selected() ? item.numberOfOccupants : 0;
       		});
			return count;
	    });
	    self.findTableById = function(id) {
			return ko.utils.arrayFirst(self.tables(), function(item) {
	            return item.id == id;
	        });
		};
	    self.findPlaceById = function(id) {
			return ko.utils.arrayFirst(self.places(), function(item) {
	            return item.id == id;
	        });
		};
		self.selectedPlaces = ko.computed(function() {
			return ko.utils.arrayFilter(self.places(), function(item) {
            	return item.selected();
       		});
	    });
		self.occupiedPlaces = ko.computed(function() {
			return ko.utils.arrayFilter(self.places(), function(item) {
            	return item.occupied();
       		});
	    });
		self.occupiedPercent = ko.computed(function() {
			return (self.occupiedPlaces().length/self.places().length * 100).toFixed(0);
	    });
		self.selectedPlacesLabel = ko.computed(function() {
			var selectedPlaces = self.selectedPlaces();
			var label = "";
			for (place in selectedPlaces) {
				label += selectedPlaces[place].label() + ', ';
			}
			//Retira a última vírgula 
			label = label.slice(0, label.length - 2);
			return label;
	    });
		self.occupyPlaces = function(){
			//No meio de uma ocupação. 
			if (self.loading()) {
				return false;
			}
			var selectedPlaces = {places:[]};
			$.each(self.selectedPlaces(), function(index, value) { 
					selectedPlaces.places.push(value.id*1);
				});
		 	if ($.isEmptyObject(selectedPlaces)) {
		 		//TODO tratar validação - pedir para selecionar mesas. 
		 		return false;
		 	}
		 	selectedPlaces["numberOfOccupants"] = self.numberOfOccupants();
		 	selectedPlaces["hasTeacher"] = self.hasTeacher();
			/* alert(selectedPlaces["numberOfOccupants"]
				+ " " + selectedPlaces["places[0].id"]
			 	+ " " + selectedPlaces["places[1].id"]); */
			self.loading(true);
			$.post('/ocupar', 
				selectedPlaces)
				.done(function(data){
					//alert("occupy ok");
			    	//location.reload();
			    	self.numberOfOccupants(1);
			    	self.hasTeacher(false);
			    	$.each(self.selectedPlaces(), function(index, value) { 
						value.occupy(true);
					});
					self.loading(false);
				})
				.fail(function(){
		        	 alert('Ops! Aconteceu um erro ao ocupar os lugares. Cheque sua conexão com a rede.');
		 			 self.loading(false);
		        	 location.reload();
				});
			return false;
		};
		self.create = function(){
			$.getJSON('/lugares.json')
		    .done(function(data) {
		    	viewmodel.name(data.name);
		    	viewmodel.gridSizePixels(data.gridSizePixels);
		    	//Para cada table 
				for (var index in data.tables) {
			    	var json = data.tables[index];
			    	//Crie uma nova table 
		    		table = new Table(json.id, json.label, json.x, json.y, json['class']);
		    		self.tables.push(table);
			    	
			    	//Para cada lugar 
			    	for (var placeIndex in json.places) {
				    	var jsonPlace = json.places[placeIndex];
						table.addPlace(jsonPlace);
			    	}
				}
		    })
		    .fail(function (xmlHttpRequest, textStatus, errorThrown) {
		         if(xmlHttpRequest.readyState == 0 || xmlHttpRequest.status == 0) 
		              return;  // it's not really an error - just a refresh or navigating away 
		         else {
		        	 // Do normal error handling 
		        	 alert('Ops! Aconteceu um erro ao receber os lugares. Vamos tentar denovo.');
		        	 location.reload();
		         }
			});
		};
		self.update = function(){
			$.getJSON('/livres.json')
		    .done(function(data) {
		    	//Para cada table 
				for (var index in data) {
			    	var json = data[index];
			    	var place = self.findPlaceById(json.id);
					place.occupy(json.occupied);
				}
		    })
		    .fail(function (xmlHttpRequest, textStatus, errorThrown) {
		         if(xmlHttpRequest.readyState == 0 || xmlHttpRequest.status == 0) 
		              return;  // it's not really an error - just a refresh or navigating away 
		         else {
		        	 // Do normal error handling 
		        	 alert('Ops! Aconteceu um erro ao atualizar os lugares. Vamos tentar denovo.');
		        	 location.reload();
		         }
			});
		};
	}
	
	viewmodel = new LayoutViewModel();
	// END KNOCKOUT JS 

	var request;
	function getNextEvent(){
		request = $.ajax({url: '/eventolivres'})
	    .done(function() { 
	    	//alert('success');  
	    	viewmodel.update();
	    	getNextEvent();
	    })
	    .fail(function (xmlHttpRequest, textStatus, errorThrown) {
	         if(xmlHttpRequest.readyState == 0 || xmlHttpRequest.status == 0) 
	              return;  // it's not really an error - just a refresh or navigating away 
	         else {
	        	 // Do normal error handling 
	        	 alert('Ops! Aconteceu um erro ao receber lugares novos. Cheque a conexão com a rede.');
	         }
		})
		.always(function(){
			// TODO getNextEvent aqui 
		});
	}
	
	$(function(){
		ko.applyBindings(viewmodel);
		viewmodel.create();
		//Next event sendo chamado pelo interval para impedir que loading bar fique aberto 
// 		getNextEvent();
		
		//Ao receber foco, sempre atualize a lista de lugares. 
		$(window).focus(function() {
	        console.log('Focus');
			viewmodel.update();
			if (request != null) {
				request.abort();
			}
			// getNextEvent();
	    });
		
		// Código para sobreviver a Sleeps e outras interrupções indesejadas da execução do JS.
		setInterval(function(){
			// $.active é o número de requests ajax abertos, 
			// e o request.readyState 0 indica que o request está 'UNSENT' 
			if ($.active == 0 || request == null || request.readyState == 0) {
// 				alert('Nenhuma conexão - reestabelecendo.');
				viewmodel.update();
				if (request != null) {
					request.abort();
				}
				// getNextEvent();
			}
		}
		,2000);
		
	});
</script>
<div id="content">

	<div id="controls" style="position:fixed;z-index: 10000; margin-top:-2px" class="unselectable" >
		<div class="button-div">
			<div>
				<input class="button" type="button" data-bind="click: occupyPlaces, attr: {value: loading() ? 'aguarde...' : 'ocupar' }"/>
			</div>
			<div class="white-text" id="teacher-input">
			<!-- TODO: a inclusão do JQuery Mobile quebrou esse posicionamento. Consertar -->
				<span style="margin-left: 33px">professor(a)</span>
				<input type="checkbox" id="teacher-checkbox" data-bind="attr: {checked: hasTeacher}"><label data-bind="click: toggleTeacher" for="teacher-checkbox"><span id="box"></span></label>
			</div>
		</div>
		<div style="position: absolute; left: 205px;">
			<span class="white-text">número de pessoas</span>
			<div id="bounds" style="width: 252px">
		    	<label><span class="radio-border" data-bind="click: subtractNumberOfOccupants">-</span></label>
				<label><span data-bind="text: numberOfOccupants" class="radio-border border-left border-right" >1</span></label>
		    	<label><span class="radio-border" data-bind="click: addNumberOfOccupants">+</span></label>
			</div>
			<div class="white-text" id="occupied-status">
				<span data-bind="text: occupiedPlaces().length + ' mesas ocupadas (' + occupiedPercent() + '%)'"></span>
			</div>
		</div>
		<div id="top">
	    	<a href="@{Application.index}"  ><img id="logo" src="/images/logo.jpg" /></a>
		</div>
	</div>

	<div id="places" class="unselectable" data-bind="foreach: places">
			<!-- ko if: table()._class == 'models.RoundTable' -->
			<div data-bind="attr: { id: id }, css: { 'occupied-place': occupied, 'selected-place': selected }, 
					style: { top: y() + 'px', left: x() + 'px', '-moz-transform': 'rotate(' + rotation + 'deg)', 
					'-webkit-transform': 'rotate(' + rotation + 'deg)', '-ms-transform': 'rotate(' + rotation + 'deg)' }, event: {vclick: select}"
				class="place round-place" 
				style="display: inline-block; position: absolute;">
			<span class="place-name" data-bind="text: label, style: {width: 56 + 'px', top: 17 + 'px',
				'-moz-transform': rotation > 85 && rotation < 255 ? 'rotate(' + 180 + 'deg)' : '',
				'-webkit-transform': rotation > 85 && rotation < 255 ? 'rotate(' + 180 + 'deg)' : '', 
				'-ms-transform': rotation > 85 && rotation < 255 ? 'rotate(' + 180 + 'deg)' : '' }" 
				></span>
			</div>		
			<!-- /ko -->
			<!-- ko if: table()._class == 'models.GenericTable' -->
			<div data-bind="attr: { id: id }, css: { 'occupied-place': occupied, 'selected-place': selected }, 
					style: { top: y() + 'px', left: x() + 'px', 
					'-webkit-transform': rotation == 90 ? 'rotate(' + rotation + 'deg) scale(1, -1)' : 'rotate(' + rotation + 'deg)',
					'-moz-transform': rotation == 90 ? 'rotate(' + rotation + 'deg) scale(1, -1)' : 'rotate(' + rotation + 'deg)',
					'-ms-transform': rotation == 90 ? 'rotate(' + rotation + 'deg) scale(1, -1)' : 'rotate(' + rotation + 'deg)'}, 
					event: {vclick: select}"
				class="place" 
				style="display: inline-block; position: absolute;">
			</div>
			<span class="place-name" data-bind="text: label, style: { top: y() + 15 + 'px', left: x() + 'px'}" 
				></span>
			<!-- /ko -->
			
	</div>
</div>
