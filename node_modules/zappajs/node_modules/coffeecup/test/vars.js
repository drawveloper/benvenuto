(function() {
  var assert, cc;

  cc = require('../lib/coffeecup');

  assert = require('assert');

  describe('Context vars', function() {
    return describe('h1 @foo', function() {
      return it('should render <h1>bar</h1>', function() {
        var v;
        v = function() {
          return h1(this.foo);
        };
        return assert.equal(cc.render(v, {
          foo: 'bar'
        }), '<h1>bar</h1>');
      });
    });
  });

  describe('Local vars', function() {
    return describe('h1 "dynamic: " + obj.foo', function() {
      return it('should render <h1>dynamic: bar</h1>', function() {
        var obj, v;
        obj = {
          foo: 'bar'
        };
        v = function() {
          return h1("dynamic: " + obj.foo);
        };
        assert.equal(cc.render(v, {
          locals: {
            obj: obj
          }
        }), '<h1>dynamic: bar</h1>');
        obj.foo = 'baz';
        return assert.equal(cc.render(v, {
          locals: {
            obj: obj
          }
        }), '<h1>dynamic: baz</h1>');
      });
    });
  });

  describe('Local vars, hardcoded', function() {
    return describe('h1 "harcoded: " + obj.foo', function() {
      return it('should render <h1>harcoded: bar</h1>', function() {
        var compiled, expected, obj, result, v;
        obj = {
          foo: 'bar'
        };
        v = function() {
          return h1("harcoded: " + obj.foo);
        };
        expected = '<h1>harcoded: bar</h1>';
        compiled = cc.compile(v, {
          hardcode: {
            obj: obj
          }
        });
        result = compiled();
        assert.equal(result, expected);
        obj.foo = 'baz';
        result = compiled();
        return assert.equal(result, expected);
      });
    });
  });

  describe('Context vars optimized', function() {
    return describe('h1 @foo', function() {
      return it('should render <h1>bar</h1>', function() {
        var v;
        v = function() {
          return h1(this.foo);
        };
        return assert.equal(cc.render(v, {
          optimized: true,
          foo: 'bar',
          cache: true
        }), '<h1>bar</h1>');
      });
    });
  });

  describe('Local vars optimized', function() {
    return describe('h1 "dynamic: " + obj.foo', function() {
      return it('should render <h1>dynamic: bar</h1>', function() {
        var obj, v;
        obj = {
          foo: 'bar'
        };
        v = function() {
          return h1("dynamic: " + obj.foo);
        };
        assert.equal(cc.render(v, {
          optimized: true,
          locals: {
            obj: obj,
            cache: true
          }
        }), '<h1>dynamic: bar</h1>');
        obj.foo = 'baz';
        return assert.equal(cc.render(v, {
          optimized: true,
          locals: {
            obj: obj
          },
          cache: true
        }), '<h1>dynamic: baz</h1>');
      });
    });
  });

  describe('Local vars, hardcoded optimized', function() {
    return describe('h1 "harcoded: " + obj.foo', function() {
      return it('should render <h1>harcoded: bar</h1>', function() {
        var compiled, expected, obj, result, v;
        obj = {
          foo: 'bar'
        };
        v = function() {
          return h1("harcoded: " + obj.foo);
        };
        expected = '<h1>harcoded: bar</h1>';
        compiled = cc.compile(v, {
          optimized: true,
          hardcode: {
            obj: obj,
            cache: true
          }
        });
        result = compiled();
        assert.equal(result, expected);
        obj.foo = 'baz';
        result = compiled();
        return assert.equal(result, expected);
      });
    });
  });

}).call(this);
