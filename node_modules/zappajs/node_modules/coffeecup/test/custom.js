(function() {
  var assert, cc;

  cc = require('../lib/coffeecup');

  assert = require('assert');

  describe('custom', function() {
    return describe('#tag(name, attr)', function() {
      it('should render', function() {
        var t;
        t = function() {
          return tag('custom');
        };
        return assert.equal(cc.render(t), '<custom></custom>');
      });
      it('should render with attributes', function() {
        var t;
        t = function() {
          return tag('custom', {
            foo: 'bar',
            ping: 'pong'
          });
        };
        return assert.equal(cc.render(t), '<custom foo="bar" ping="pong"></custom>');
      });
      return it('should render with attributes and inner attributes', function() {
        var t;
        t = function() {
          return tag('custom', {
            foo: 'bar',
            ping: 'pong'
          }, function() {
            return 'zag';
          });
        };
        return assert.equal(cc.render(t), '<custom foo="bar" ping="pong">zag</custom>');
      });
    });
  });

  describe('custom optimized', function() {
    return describe('#tag(name, attr)', function() {
      it('should render', function() {
        var t;
        t = function() {
          return tag('custom');
        };
        return assert.equal(cc.render(t, {
          optimized: true,
          cache: true
        }), '<custom></custom>');
      });
      it('should render with attributes', function() {
        var t;
        t = function() {
          return tag('custom', {
            foo: 'bar',
            ping: 'pong'
          });
        };
        return assert.equal(cc.render(t, {
          optimized: true,
          cache: true
        }), '<custom foo="bar" ping="pong"></custom>');
      });
      return it('should render with attributes and inner attributes', function() {
        var t;
        t = function() {
          return tag('custom', {
            foo: 'bar',
            ping: 'pong'
          }, function() {
            return 'zag';
          });
        };
        return assert.equal(cc.render(t, {
          optimized: true,
          cache: true
        }), '<custom foo="bar" ping="pong">zag</custom>');
      });
    });
  });

}).call(this);
